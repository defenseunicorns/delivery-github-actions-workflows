name: Run E2E Tests

description: Run E2E Tests

inputs:
  # either pass in a token, or an app id and private key
  token:
    description: "The GitHub token to use for authentication"
    required: false
  application_id:
    description: "The GitHub App ID"
    required: false
  application_private_key:
    description: "The GitHub App private key"
    required: false
  region:
    description: The AWS region to deploy to
    required: true
  role-to-assume:
    description: The AWS IAM Role to assume in the target account
    required: true
  send-status:
    description: Whether to send status updates to GitHub
    required: false
    default: true
  github-context:
    description: The GitHub Status Context to use when updating the status
    required: false
    default: "default e2e test context"
  make-target:
    description: The make target to run
    required: true
  buildharness_version:
    description: The version of buildharness used by the caller repo
    required: true
  golang_version:
    description: The version of golang used by the buildharness release from the caller repo
    required: true
  terraform_version:
    description: The version of terraform used by the buildharness release from the caller repo
    required: true
  zarf_version:
    description: The version of zarf used by the buildharness release from the caller repo
    required: true

runs:
  using: composite
  steps:
    - name: Get token
      id: get_installation_token
      uses: peter-murray/workflow-application-token-action@d17e3a9a36850ea89f35db16c1067dd2b68ee343 # v4
      if: ${{ !inputs.token }}
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}

    # Update GitHub status for pending pipeline run
    - name: "Update GitHub Status for pending"
      uses: docker://cloudposse/github-status-updater
      if: ${{ inputs.send-status == 'true' }}
      with:
        args: "-action update_state -state pending -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "started by @${{ github.event.client_payload.github.actor || github.actor }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    - name: Checkout Repo for chatOps
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
      with:
        token: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        repository: ${{ github.event.client_payload.pull_request.head.repo.full_name || github.repository }}
        ref: ${{ github.event.client_payload.pull_request.head.ref || github.ref_name }}

    - name: Init gopath cache
      uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4
      with:
        path: "${{ github.workspace }}/.cache/go"
        key: "gopath|${{ inputs.golang_version }}|${{ hashFiles('go.sum') }}"

    - name: Init gobuild cache
      uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4
      with:
        path: "${{ github.workspace }}/.cache/go-build"
        key: "gobuild|${{ inputs.golang_version }}|${{ hashFiles('go.sum') }}"

    - name: Init zarf cache
      uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4
      with:
        path: "${{ github.workspace }}/.cache/.zarf-cache"
        key: "zarf|${{ inputs.zarf_version }}"

    - name: Init docker cache
      id: init-docker-cache
      uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4
      with:
        path: "${{ github.workspace }}/.cache/docker"
        key: "docker|${{ inputs.buildharness_version }}"

    - name: Docker save build harness
      if: steps.init-docker-cache.outputs.cache-hit != 'true'
      shell: bash -e -o pipefail {0}
      run: |
        make docker-save-build-harness

    - name: Load build harness
      shell: bash -e -o pipefail {0}
      run: |
        make docker-load-build-harness

    - name: Init Terraform Cache
      uses: actions/cache@d4323d4df104b026a6aa633fdb11d772146be0bf # v4
      with:
        path: "${{ github.workspace }}/.cache/.terraform.d/plugin-cache"
        key: "${{ runner.os }}-terraform-plugins|${{ inputs.terraform_version }}|${{ hashFiles('examples/complete/providers.tf') }}"

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4
      with:
        role-to-assume: ${{ inputs.role-to-assume }}
        role-session-name: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}_${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        aws-region: ${{ inputs.region }}
        # 21600 seconds == 6 hours
        role-duration-seconds: 21600

    - name: "Run E2E tests"
      shell: bash -e -o pipefail {0}
      id: run_e2e
      env:
        TF_VAR_region: ${{ inputs.region }}
        TF_VAR_tags: '{"GithubCI":"true"}'
      run: |
        echo "Running E2E ${{ inputs.make-target }}" && \
        make ${{ inputs.make-target }} fix-cache-permissions

    # this is because the github installation token expires after an hour, non-configurable, sometimes the tests take longer than an hour
    # https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-an-installation-access-token-for-a-github-app
    - name: "Get token again"
      id: get_installation_token_again
      if: ${{ always() && inputs.send-status == 'true' && !inputs.token }}
      uses: peter-murray/workflow-application-token-action@d17e3a9a36850ea89f35db16c1067dd2b68ee343 # v4
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}

    # Update GitHub status
    - name: "Update github status for failure or success"
      if: ${{ always() && inputs.send-status == 'true' }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state ${{ env.GITHUB_STATE }} -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token_again.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run status: ${{ steps.run_e2e.outcome }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}
        GITHUB_STATE: ${{ steps.run_e2e.outcome == 'cancelled' == 'error' || steps.run_e2e.outcome }}
