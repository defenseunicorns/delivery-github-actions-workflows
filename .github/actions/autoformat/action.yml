name: Autoformat

description: Autoformat code using pre-commit

inputs:
  # either pass in a token, or an app id and private key
  token:
    description: 'The GitHub token to use for authentication'
    required: false
  application_id:
    description: 'The GitHub App ID'
    required: false
  application_private_key:
    description: 'The GitHub App private key'
    required: false
  github-context:
    description: The GitHub Status Context to use when updating the status
    required: true
  buildharness_version:
    description: The version of buildharness used by the caller repo
    required: true
  golang_version:
    description: The version of golang used by the buildharness release from the caller repo
    required: true
  terraform_version:
    description: The version of terraform used by the buildharness release from the caller repo
    required: true
  zarf_version:
    description: The version of zarf used by the buildharness release from the caller repo
    required: true

runs:
  using: composite
  steps:

    - name: Get token
      id: get_installation_token
      uses: peter-murray/workflow-application-token-action@d17e3a9a36850ea89f35db16c1067dd2b68ee343 # v4
      if: ${{ !inputs.token }}
      with:
        application_id: ${{ inputs.application_id }}
        application_private_key: ${{ inputs.application_private_key }}

    # Update GitHub status for pending pipeline run
    - name: "Update GitHub Status for pending"
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state pending -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "started by @${{ github.event.client_payload.github.actor || github.actor }}"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    - name: Checkout caller repo for processing this action
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
      with:
        token: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        repository: ${{ github.event.client_payload.pull_request.head.repo.full_name || github.repository }}
        ref: ${{ github.event.client_payload.pull_request.head.ref || github.ref }}

    - name: Init gopath cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
      with:
        path: "${{ github.workspace }}/.cache/go"
        key: "gopath|${{ inputs.golang_version }}|${{ hashFiles('go.sum') }}"

    - name: Init gobuild cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
      with:
        path: "${{ github.workspace }}/.cache/go-build"
        key: "gobuild|${{ inputs.golang_version }}|${{ hashFiles('go.sum') }}"

    - name: Init zarf cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
      with:
        path: "${{ github.workspace }}/.cache/.zarf-cache"
        key: "zarf|${{ inputs.zarf_version }}"

    - name: Init docker cache
      id: init-docker-cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
      with:
        path: "${{ github.workspace }}/.cache/docker"
        key: "docker|${{ inputs.buildharness_version }}"

    - name: Docker save build harness
      if: steps.init-docker-cache.outputs.cache-hit != 'true'
      shell: bash -e -o pipefail {0}
      run: |
        make docker-save-build-harness

    - name: Load build harness
      shell: bash -e -o pipefail {0}
      run: |
        make docker-load-build-harness

    - name: Init Terraform Cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
      with:
        path: "${{ github.workspace }}/.cache/.terraform.d/plugin-cache"
        key: "${{ runner.os }}-terraform-plugins|${{ inputs.terraform_version }}|${{ hashFiles('examples/complete/providers.tf') }}"

    - name: Update files with automatic formatting tools
      shell: bash -e -o pipefail {0}
      run: |
        make autoformat fix-cache-permissions || make autoformat

      # Use the GraphQL API to commit changes, so we get automatic commit signing - https://docs.github.com/en/graphql/reference/mutations#commit-signing
      # The REST contents API can't be used as easily because it only supports making single file commits
    - name: Commit updated files
      shell: bash -e -o pipefail {0}
      env:
        GITHUB_TOKEN: ${{ steps.get_installation_token.outputs.token || github.token }}
      run: |
        # Initialize empty arrays for storing filenames that are added or removed
        additions=()
        removed=()

        # Read the git status output and categorize files as added or removed
        while IFS= read -r -d $'\0' status_line; do
            filename="${status_line:3}"
            git_status="${status_line:0:2}"

            if [ "$git_status" = "D " ]; then
                removed+=("$filename")
            else
                file_contents=$(base64 -w 0 < "$filename")
                additions+=("$file_contents,$filename")
            fi
        done < <(git status --porcelain=v1 -z)

        # If there are no additions, exit the script
        if [ "${#additions[@]}" -eq 0 ]; then
          echo "No files updated, skipping commit"
          exit 0
        fi

        # for now, we ignore $removed files, but they could be handled similarly (it's just harder to send two lists of positional input files into jq)
        # jq's iteration over inputs will skip over files with 0 lines (empty files)

        commitMessage="chore: automated formatting of files"

        echo "-------------------------"
        echo
        echo "GraphQL fileContents and names: $(echo "${additions[@]}" | jq -R -c 'split(" ") | map(split(",") | {contents: .[0], path: .[1]})')"
        echo
        echo "-------------------------"

        jq \
          --raw-input \
          --null-input \
          --arg repositoryNameWithOwner "${{ github.event.client_payload.github.payload.repository.full_name || github.event.repository.full_name }}" \
          --arg branchName "${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}" \
          --arg expectedHeadOid "${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}" \
          --arg commitMessage "$commitMessage" \
          --argjson fileContentsAndNames "$(echo "${additions[@]}" | jq -R -c 'split(" ") | map(split(",") | {contents: .[0], path: .[1]})')" \
          '{
          "query": "mutation ($input: CreateCommitOnBranchInput!) { createCommitOnBranch(input: $input) { commit { url } } }",
          "variables": {
            "input": {
              "branch": {
                "repositoryNameWithOwner": $repositoryNameWithOwner,
                "branchName": $branchName
              },
              "message": {
                "headline": $commitMessage
              },
              "fileChanges": {
                "additions": $fileContentsAndNames
              },
              "expectedHeadOid": $expectedHeadOid
            }
          }
        }' | \
        curl https://api.github.com/graphql \
          --silent \
          --fail-with-body \
          --oauth2-bearer "$(gh auth token)" \
          --data @-

    # Update GitHub status for successful pipeline run
    - name: "Update GitHub Status for success"
      if: ${{ success() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state success -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run passed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for failing pipeline run
    - name: "Update GitHub Status for failure"
      if: ${{ failure() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state failure -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run failed"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}

    # Update GitHub status for cancelled pipeline run
    - name: "Update GitHub Status for cancelled"
      if: ${{ cancelled() }}
      uses: docker://cloudposse/github-status-updater
      with:
        args: "-action update_state -state error -ref ${{ env.REPO_SHA }} -repo ${{ env.REPO_NAME }}"
      env:
        REPO_SHA: ${{ github.event.client_payload.pull_request.head.sha || github.event.pull_request.head.sha || github.sha }}
        REPO_NAME: ${{ github.event.client_payload.github.payload.repository.name || github.event.repository.name }}
        GITHUB_TOKEN: ${{ inputs.token || steps.get_installation_token.outputs.token }}
        GITHUB_CONTEXT: ${{ inputs.github-context }}
        GITHUB_DESCRIPTION: "run cancelled"
        GITHUB_TARGET_URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        GITHUB_REF: ${{ github.event.client_payload.pull_request.head.ref || github.event.pull_request.head.ref || github.ref_name }}
        GITHUB_OWNER: ${{ github.event.client_payload.github.payload.repository.owner.login || github.repository_owner }}
